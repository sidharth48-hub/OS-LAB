alias userSP R1;
userSP = SP;

alias process_table_entry R2;
process_table_entry  = PROCESS_TABLE  + ([SYSTEM_STATUS_TABLE + 1]*16);

[process_table_entry + 9] = 7;//MODE FLAG

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

PTBR = [process_table_entry + 14];

alias fileDescriptor R3;
fileDescriptor = [([PTBR + 2*((userSP - 4)/512)]*512) + (userSP - 4) % 512];

alias retAddr R4;
retAddr = [PTBR + 2*((userSP - 1)/512)]*512 + ((userSP-1)%512);

alias input R5;
input = [([PTBR + 2*((userSP - 3)/512)]*512 + ((userSP - 3)%512))];

alias userAreapage R6;
userAreapage = [process_table_entry + 11];


///Terminal Read//////////
if(fileDescriptor == -1) then
   multipush(R1,R2,R3,R4,R5,R6);

   R1 = 4;
   R2 = [SYSTEM_STATUS_TABLE+1];
   R3 = input;
   call MOD_4;
   multipop(R1,R2,R3,R4,R5,R6);
   [retAddr] = 0;
else
   if(fileDescriptor < 0 || fileDescriptor > 7) then
      [retAddr] = -1;
      [process_table_entry + 9] = 0;
      SP = userSP;
      ireturn;
   endif;

   if([(userAreapage)*512 + 496 + 2*fileDescriptor] != FILE) then
      [retAddr] = -1;
      [process_table_entry + 9] = 0;
      SP = userSP;
      ireturn;
   endif;

   alias open_file_index R7;
   open_file_index = [(userAreapage)*512 + 496 + 2*fileDescriptor + 1];

   alias inode_index R8;
   inode_index = [OPEN_FILE_TABLE + open_file_index*4];

   ///calling Acquire inode////
   multipush(R1,R2,R3,R4,R5,R6,R7,R8);
   R1 = 4;
   R2 = inode_index;
   R3 = [SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
   multipop(R1,R2,R3,R4,R5,R6,R7,R8);
   
   //if lock fails
   if(R0 == -1) then
      [retAddr] = -1;
      [process_table_entry + 9] = 0;
      SP = userSP;
      ireturn;
   endif;

   alias lseek R9;
   lseek = [OPEN_FILE_TABLE + open_file_index*4 + 2];

   if(inode_index == INODE_ROOT) then
      if(lseek >= 480) then
         
         ///calling release inode////
         multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
         R1 = 5;
         R2 = inode_index;
         R3 = [SYSTEM_STATUS_TABLE + 1];
         call MOD_0;
         multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

         [retAddr] = -2;
         [process_table_entry + 9] = 0;
         SP = userSP;
         ireturn;

      else
      
         [[PTBR + 2 * (input/512)] * 512 + (input)%512] = [ROOT_FILE + lseek];
         [OPEN_FILE_TABLE + open_file_index*4 + 2] = [OPEN_FILE_TABLE + open_file_index*4 + 2] + 1;
      endif;

   else
      if(lseek >= [INODE_TABLE + inode_index*16 + 2]) then

         ///calling release inode////
         multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
         R1 = 5;
         R2 = inode_index;
         R3 = [SYSTEM_STATUS_TABLE + 1];
         call MOD_0;
         multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

         [retAddr] = -2;
         [process_table_entry + 9] = 0;
         SP = userSP;
         ireturn;
      endif;
      
      ////////calling buffer_read//////
      multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
      R1 = 2;
      R2 = [INODE_TABLE + inode_index*16 + 8 + lseek/512];//disk block number
      R3 = lseek%512;//offset
      R4 = input;
      call MOD_3;
      multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

      [OPEN_FILE_TABLE + open_file_index*4 + 2] = [OPEN_FILE_TABLE + open_file_index*4 + 2] + 1; 
      

   endif;      
   
   ///calling release inode////
   multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
   R1 = 5;
   R2 = inode_index;
   R3 = [SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
   multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
   
endif;

[retAddr] = 0;
[process_table_entry + 9]=0;
SP = userSP;
ireturn;