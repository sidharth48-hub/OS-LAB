//print "MOD6";
//breakpoint;
alias functionNum R1;
alias currentPID R2;


//swap out
if(functionNum == 1) then
	alias iter R3;
	alias index R4; //index of entry to be swapped out
	alias pte R5;
	index = -1;
	
	
	//choose process to swap out other than SHELL/INIT/IDLE
	
	//WAIT_PROCESS
	iter = 3;
	while(iter < 15) do
		pte = PROCESS_TABLE + iter*16;
		if([pte + 6] == 0 && [pte + 4] == WAIT_PROCESS) then
			index = iter;
			break;
		endif;
		iter = iter + 1;
	endwhile;
	
	//WAIT_SEMAPHORE
	if(iter == 15) then
		iter = 3;
		while(iter < 15) do
			pte = PROCESS_TABLE + iter*16;
			if([pte + 6] == 0 && [pte + 4] == WAIT_SEMAPHORE) then
				index = iter;
				break;
			endif;
			iter = iter + 1;
		endwhile;
	endif;
	
	
	

	
	//process with maximum TICK
	if(iter == 15) then
		iter = 3;
		while(iter < 15) do
			pte = PROCESS_TABLE + iter*16;
			if([pte + 6] == 0 && [pte + 4] != RUNNING && [pte + 4] != ALLOCATED && [pte + 4] != TERMINATED) then
			
				if(index == -1) then
					index = iter;
				else
					if([pte] > [PROCESS_TABLE + index*16]) then
						index = iter;
					endif;
				endif;
				
			endif;
			iter = iter + 1;
		endwhile;
	endif;
	

	
	//no process to swap exists
	if(index == -1) then
		[SYSTEM_STATUS_TABLE + 5] = 0;
		return;
	endif;
	
	//print "SWAP OUT";
	//print index;
	
	//setting TICK of selected process to 0
	[PROCESS_TABLE + index*16] = 0;
	
	
	//For heap, code and stack pages
	
	alias ptbr R6;
	ptbr = [PROCESS_TABLE + index*16 + 14];
	

	
	iter = 2;
	while(iter < 10) do
		if([ptbr + 2*iter] != -1) then
			//print "pagetable";
			//stack or unshared heap pages
			if(((iter >= 2 && iter <= 3) && [MEMORY_FREE_LIST + [ptbr + 2*iter]] == 1) || (iter >= 8 && iter <= 9)) then
				//print "heapstack";
				//get swap block
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 6;
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				[DISK_MAP_TABLE + index*10 + iter] = R0;
				
				//print "storing";
				
				//disk store
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 1;
				R2 = currentPID;
				R3 = [ptbr + 2*iter];
				R4 = R0;
				call MOD_4;
				multipop(R1,R2,R3,R4,R5,R6);
				
				
			endif;
			
			//print "releasing";
			if((iter != 2 && iter != 3) || ((iter >= 2 && iter <= 3) && [MEMORY_FREE_LIST + [ptbr + 2*iter]] == 1)) then
			
				//release page
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 2;
				R2 = [ptbr + 2*iter];
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
			
				[ptbr + 2*iter] = -1;
				[ptbr + 2*iter + 1] = "0000";
			endif;
			
		endif;
		iter = iter + 1;
	endwhile;
	
	

	
	
	
	
	[PROCESS_TABLE + index*16 + 6] = 1;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	//print "end";
	
	
	return;
endif;


//swap in
if(functionNum == 2) then


	
	alias iter R3;
	alias index R4;
	index = -1;
	
	//looping through process table to find process to swap in
	iter = 3;
	while(iter < 15) do
		if([PROCESS_TABLE + iter*16 + 6] == 1 && [PROCESS_TABLE + iter*16 + 4] == READY) then
			if(index == -1) then
				index = iter;
			else
				if([PROCESS_TABLE + iter*16] > [PROCESS_TABLE + index*16]) then
					index = iter;
				endif;
			endif;
		endif;
		iter = iter + 1;
	endwhile;
	
	//no process to swap in
	if(index == -1) then
		[SYSTEM_STATUS_TABLE + 5] = 0;
		return;
	endif;
	
	//print "SWAP IN";
	//print index;
	
	[PROCESS_TABLE + index*16] = 0;
	
	alias ptbr R5;
	ptbr = [PROCESS_TABLE + index*16 + 14];
	
	iter = 2;
	while(iter < 10) do
		//print "pagetable";
		if([DISK_MAP_TABLE + index*10 + iter] != -1) then
			if((iter >= 2 && iter <= 3) || (iter >= 8 && iter <= 9)) then
				//print "heapstackpage";
				
				alias pageNum R6;
			
				//get free page
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 1;
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				//print R0;
				pageNum = R0;
				
				//print "loading";
				//print currentPID;
			
			
				//disk load
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 2;
				R2 = currentPID;
				R4 = [DISK_MAP_TABLE + index*10 + iter];
				R3 = pageNum;
				call MOD_4;
				multipop(R1,R2,R3,R4,R5,R6);
				
				//print "releasing";
				
				//release block
				multipush(R1,R2,R3,R4,R5,R6);
				R1 = 4;
				R2 = [DISK_MAP_TABLE + index*10 + iter];
				call MOD_2;
				multipop(R1,R2,R3,R4,R5,R6);
				
				[ptbr + 2*iter] = pageNum;
				[ptbr + 2*iter + 1] = "0110";
				
				[DISK_MAP_TABLE + index*10 + iter] = -1;
		
			endif;
		endif;
		
		iter = iter + 1;
		
	endwhile;
	
	[PROCESS_TABLE + index*16 + 6] = 0;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
	[SYSTEM_STATUS_TABLE + 5] = 0;
	
	//breakpoint;
	//print "end";
	
	return;
endif;