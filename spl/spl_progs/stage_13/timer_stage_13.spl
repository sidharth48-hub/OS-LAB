// breakpoint;
// each entry in process table contains 16 words so we multiply by 16 
// the 13th word had the UTPR
// this code does UTPR = SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// UArea Page number is in PROCESS_TABLE +  PID * 16 since there are 16 words in each entry
// Setting SP to UArea Page number * 512 - 1 (kernel stack)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;


// The Process table entry of the current process can be computed as PROCESS_TABLE + currentPID*16. Save the KPTR, PTBR and PTLR values to the Process Table entry of the current process. Set the state of the process as READY.
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

// changing status of the current program to ready
[process_table_entry + 4] = READY;

// 2 Obtain the PID of currently executing process from System Status Table.
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

// increasing tick of every program
alias iter R1;
iter=0;
while(iter<16) do
    [PROCESS_TABLE + iter*16 + 0] = [PROCESS_TABLE + iter*16 + 0] + 1;
    iter = iter +1;
endwhile;

// Scheduleing algorithm round robin
call MOD_5;


restore;

// this code does SP = UTPR;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9]=0; // MODE
// breakpoint;
ireturn;