
// Change virtual memory model such that code occupies logical pages 4 and 5 and the stack lies in logical page 8. You will have to modify the user program as well as the os startup code.
// Load the INIT program from the disk to the memory.
// In Disk 65-66 , in memory 7 - 8
loadi(65,7);
loadi(66,8);


//Load the INT10 module from the disk to the memory.
// 35 - 36	Interrupt 10 Routine: Exit	2 in Disk
// 22 - 23	Interrupt 10 Routine: Exit	11264 - 12287 1024 in Memory

loadi(22,35);
loadi(23,36);

// Load the exception handler routine from the disk to the memory.
// 5 - 16	Exception Handler	2
// 2 - 3	Exception Handler	1024 - 2047	1024 in Memory
loadi(2, 15);
loadi(3, 16);


// Load Library Code from disk to memory
loadi(63,13);
loadi(64,14);

//Load the timer interrupt routine from disk blocks 17 and 18 to memory pages 4 and 5.
loadi(4, 17);
loadi(5, 18);

// Add code in the OS startup code to load INT7 from disk to memory.
loadi(16,29);
loadi(17,30);

//  Load the idle code from disk to memory.
loadi(69,11);
loadi(70,12);

PTLR = 10;
// IDLE
PTBR = PAGE_TABLE_BASE; // 29696 //as PID of idle process is 0

//Library FOR IDLE IS NOT USED
// [PTBR+0] = -1;
// [PTBR+1] = "0000";
// [PTBR+2] = -1;
// [PTBR+3] = "0000";

//Library FOR IDLE IS  USED FOR ASSIGNMENT 1
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap FOR IDLE IS NOT USED
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code FOR IDLE
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack FOR IDLE 
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";



// You need two pages for storing the INIT program code (loaded from disk blocks 7 and 8) and one additional page for stack (why?). Hence, PTLR is set to value 3.
PTBR = PAGE_TABLE_BASE+20; //29696+20 = 29716


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// The second field of this table must be set to the PID of the process which is going to be run in user mode.
[SYSTEM_STATUS_TABLE + 1] = 1; // Process ID (PID)

// PROCESS 1

// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE + 16*1+ 1] = 1;
[PROCESS_TABLE +16*1+ 4] = RUNNING; 
// Since the first available free page is 80, the User Area page is allocated at the physical page number 80. 
[PROCESS_TABLE + 16*1+ 11] = 80;
[PROCESS_TABLE +16*1+ 12] = 0; // KPTR
[PROCESS_TABLE +16*1+ 13] = 8*512; // UPTR
[PROCESS_TABLE +16*1+ 14] = 29716; // PTBR +20
[PROCESS_TABLE +16*1+ 15] = 10; // PTLR



// PROCESS 0

// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE +  1] = 0;
[PROCESS_TABLE + 4] = CREATED; 
// Since the first available free page is 82, the User Area page is allocated at the physical page number 80. 
[PROCESS_TABLE +  11] = 82;
[PROCESS_TABLE + 12] = 0; // KPTR
[PROCESS_TABLE + 13] = 8*512; // UPTR
[PROCESS_TABLE + 14] = 29696; // PTBR 
[PROCESS_TABLE + 15] = 10; // PTLR


// breakpoint;

SP = 8*512; //  accessing stack  from the page table using logical address
[76*512] = [65 * 512 + 1]; // Since the first code page is loaded into memory page 65, the address of the second word in header is calculated as (65 * 512) + 1. This value is stored to the top of the user stack. 
[81 * 512] = [69*512 + 1];


 

ireturn; 
 
  

