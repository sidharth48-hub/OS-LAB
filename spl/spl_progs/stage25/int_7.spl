alias userSP R1;
userSP = SP;

alias process_table_entry R2;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 9] = 5; //MODE FLAG

//Switching to kernel stack
[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

PTBR = [process_table_entry + 14];


alias fileDescriptor R3;
fileDescriptor = [([PTBR + 2*((userSP - 4)/512)]*512) + (userSP - 4) % 512];

alias retAddr R4;
retAddr = [PTBR + 2*((userSP - 1)/512)]*512 + ((userSP-1)%512);

alias word R5;
word = [([PTBR + 2*((userSP - 3)/512)]*512 + ((userSP - 3)%512))];


//checking for Terminal write//
if(fileDescriptor == -2) then
    
    ///Terminal write from Device manager module//
    multipush(R1,R2,R3,R4,R5);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word;
    call MOD_4;
    multipop(R1,R2,R3,R4,R5);

    [process_table_entry + 9] = 0;
    SP = userSP;
    [retAddr] = 0;
    ireturn;
endif;    

///checking for validity of the fileDescriptor///
if(fileDescriptor < 0 || fileDescriptor > 7) then
    [retAddr] = -1;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

alias per_process_table R6;
per_process_table  = ([process_table_entry + 11])*512 + 496 + 2*fileDescriptor;


///checking resource identifier in per_process_table///
if([per_process_table]==-1 || [per_process_table]!=FILE) then
    [retAddr] = -1;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;    


alias open_file_table R7;
open_file_table = OPEN_FILE_TABLE + [per_process_table + 1]*4;

alias inode_index R8;
inode_index = [open_file_table];

alias userID R9;
userID = [process_table_entry + 3];

alias inode_entry R10;
inode_entry = INODE_TABLE + inode_index*16;


///checking if the current user is root or own the file
if(userID != 1 && userID != [inode_entry + 3] && [inode_entry + 4] == 0) then
    [retAddr] = -3;
    SP = userSP;
    [process_table_entry + 9] = 0;
    ireturn;
endif;


///Acquire inode///
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
R1 = 4;
R2 = inode_index;
R3 = [SYSTEM_STATUS_TABLE + 1];
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

//if Acquire inode fails//
if(R0 == -1) then
    [retAddr] = -1;
    SP = userSP;
    [process_table_entry + 9] = 0;
    ireturn;
endif;

alias lseek R11;
lseek = [open_file_table + 2];


if(lseek >= MAX_FILE_SIZE) then
    //release inode//
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
    R1 = 5;
    R2 = inode_index;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

    [retAddr] = -2;
    SP = userSP;
    [process_table_entry + 9] = 0;
    ireturn;
endif;


if((lseek%512) == 0 && lseek == [inode_entry + 2]) then
    ///Get Free Block///
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
    R1 = 3;
    call MOD_2;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

    if(R0 == -1) then
        //release inode//
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        R1 = 5;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        
        [retAddr] = -2;
        SP = userSP;
        [process_table_entry + 9] = 0;
        ireturn;
    endif;

    [inode_entry + 8 + (lseek/512)] = R0;    
endif;


///Buffered Write///
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
R1 = 1;
R2 = [inode_entry + 8 + (lseek/512)];
R3 = (lseek%512);
R4 = word;
call MOD_3;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

if(lseek == [inode_entry + 2]) then
    [inode_entry + 2] = [inode_entry + 2] + 1;
    [ROOT_FILE  + inode_index*8 + 1] = [ROOT_FILE  + inode_index*8 + 1] + 1;
endif;

[open_file_table + 2] = [open_file_table + 2] + 1;//incrementing lseek

//release inode//
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
R1 = 5;
R2 = inode_index;
R3 = [SYSTEM_STATUS_TABLE + 1];
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

[process_table_entry + 9] = 0;
SP = userSP;
[retAddr] = 0;
ireturn;

