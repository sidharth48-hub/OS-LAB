alias currentPID R10;
alias process_table_entry R11;

currentPID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + currentPID*16;


[process_table_entry + 9]=8;

[process_table_entry + 13]=SP;
SP=[process_table_entry + 11]*512 - 1;

alias userSP R14;
alias child_PID R0;
alias iter R1;
alias child_pt_entry R12;



R1=1;
call MOD_1;

child_pt_entry = PROCESS_TABLE + child_PID*16;

alias ptbr R2;
ptbr = [process_table_entry + 14];

userSP = [process_table_entry + 13];

if(child_PID==-1) then
   [[ptbr + 2*((userSP - 1)/512)]*512 + ((userSP - 1)%512)] = -1;

   [process_table_entry + 9]=0;
   SP = [process_table_entry + 13];
   ireturn;
endif; 


//Allocating heap for parent if it does not have
iter=0;

while(iter<2) do
    if([ptbr + 4 + 2*iter]==-1) then
        multipush(R0,R1,R2,R10,R11);
        R1=1;
        call MOD_2;
        R3=R0;
        multipop(R0,R1,R2,R10,R11);
        [ptbr + 4 + 2*iter]=R3;
        [ptbr + 5 + 2*iter]="0110";
    endif;
    iter=iter+1;
endwhile;    

alias childPTBR R3;
childPTBR = [child_pt_entry + 14];


//Allocating stack pages for child process

iter=0;

while(iter<2) do
    multipush(R0,R1,R2,R3,R10,R11);
    R1=1;
    call MOD_2;
    R4=R0;
    multipop(R0,R1,R2,R3,R10,R11);

    [childPTBR + 16 + 2*iter]=R4;
    [childPTBR + 17 + 2*iter]="0110";
    
    iter=iter+1;
endwhile;   


//Allocating user_area_page for child process

multipush(R0,R1,R2,R3,R10,R11);
R1=1;
call MOD_2;
R4=R0;
multipop(R0,R1,R2,R3,R10,R11);

[child_pt_entry + 11]=R4;



//Initializing child_process_table
[child_pt_entry + 3] = [process_table_entry + 3];//userid
[child_pt_entry + 6] = [process_table_entry + 6];//swap flag
[child_pt_entry + 7] = [process_table_entry + 7];//inode index
[child_pt_entry + 10] = [process_table_entry + 10];//swap flag field
[child_pt_entry + 13] = [process_table_entry + 13];//uptr

[child_pt_entry + 9] =0;//mode
[child_pt_entry + 0] =0;//tick
[child_pt_entry + 12] =0;//kptr

[child_pt_entry + 2] = currentPID;//PPID
[child_pt_entry + 4] = CREATED;



/////////PER-PROCESS RESOURCE TABLE///////////
iter=0;

while(iter<8) do
    R4 = (([child_pt_entry + 11] + 1)*512) - 16 + 2*iter;
    R5 = (([process_table_entry + 11] + 1)*512) - 16 + 2*iter;

    [R4] = [R5];
    [R4 + 1] = [R5 + 1];
    
    if(R4 == SEMAPHORE) then
       R6 = SEMAPHORE_TABLE + ([R4 + 1])*4 + 1;
       [R6] = [R6] + 1;
    endif;

    iter=iter+1;
endwhile;

//////////DISK MAP TABLE/////////////
alias disk_map_table_entry_p R4;
alias disk_map_table_entry_c R5;

disk_map_table_entry_p = DISK_MAP_TABLE + currentPID*10;
disk_map_table_entry_c = DISK_MAP_TABLE + child_PID*10;


iter=0;

while(iter<10) do
    [disk_map_table_entry_c + iter] = [disk_map_table_entry_p + iter];
    iter = iter + 1;
endwhile;



//Initializing page table of child process

//library
[childPTBR + 0] = [ptbr + 0];
[childPTBR + 1] = [ptbr + 1];
[childPTBR + 2] = [ptbr + 2];
[childPTBR + 3] = [ptbr + 3];

R9 = [MEMORY_FREE_LIST + [ptbr + 0]];
R9 = R9 + 1;

R9 = [MEMORY_FREE_LIST + [ptbr + 2]];
R9 = R9 + 1;


//heap
[childPTBR + 4] = [ptbr + 4];
[childPTBR + 5] = [ptbr + 5];
[childPTBR + 6] = [ptbr + 6];
[childPTBR + 7] = [ptbr + 7];

[MEMORY_FREE_LIST + [ptbr + 4]] = [MEMORY_FREE_LIST + [ptbr + 4]] + 1;
[MEMORY_FREE_LIST + [ptbr + 6]] = [MEMORY_FREE_LIST + [ptbr + 6]] + 1;

//code
iter = 0;

while(iter<4) do
    R9 = ptbr + 8 + 2*iter;
    [childPTBR + 8 + 2*iter] = [R9];
    [childPTBR + 9 + 2*iter] = [R9 + 1];
    
    if([R9] != -1) then
        R9 = MEMORY_FREE_LIST + [R9];
        [R9] = [R9] + 1;
    endif;
    iter = iter + 1;
endwhile;


//copying stack word by word from parent to child

alias iter2 R6;
iter2 = 0;
iter = 0;

while(iter2<2) do
    while(iter<512) do
       [[childPTBR + 16 + 2*iter2]*512 + iter] = [[ptbr + 16 + 2*iter2]*512 + iter];
       iter=iter+1;
    endwhile;
    iter2=iter2+1;
endwhile;       

[[child_pt_entry + 11]*512]=BP;

//setting up return value;
alias childSP_ret R7;
childSP_ret = [child_pt_entry + 13] - 1;

[[childPTBR + 2*((childSP_ret)/512)]*512 + ((childSP_ret)%512)] = 0;


alias parentSP_ret R8;
parentSP_ret = [process_table_entry + 13] - 1;

[[ptbr + 2*((parentSP_ret)/512)]*512 + ((parentSP_ret)%512)] = child_PID;

[process_table_entry + 9]=0;
SP = [process_table_entry + 13];

ireturn;