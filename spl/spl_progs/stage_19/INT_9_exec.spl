alias userSP R0;
userSP = SP;

///////Saving User Stack and setting up kernel Stack//////////
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;


////////Setting up Mode_flag//////////////
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 9;


////////Getting the name of the file from the user_stack///////// 
alias physicalPageNum R1;
alias offset R2;
alias fileNameAddr R3;
physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
offset = (userSP - 4) % 512;
fileNameAddr = physicalPageNum*512 + offset;
alias fileName R4;
fileName = [fileNameAddr];

alias count R5;
count=0;

alias inode_index R6;
inode_index=-1;

/////////Searching for the memory copy of the file in the Inode Table////////
while(count < MAX_FILE_NUM) do
   if([INODE_TABLE+count*16]==EXEC) then
        if([INODE_TABLE+count*16+1]==fileName) then
            inode_index=count;
            //R11 = [INODE_TABLE+count*16+1];
            
            ////Calling Exit process function from process manager module///
            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1 = 3;
            R2 = [SYSTEM_STATUS_TABLE+1];
            call MOD_1;
            multipop(R0,R1,R2,R3,R4,R5,R6);
            

            ///Getting user_area_page_number/////////
            alias userPageNo R7;
            userPageNo = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];
            

            ////Reclaiming the same page of the current_process//////
            [MEMORY_FREE_LIST+userPageNo]=1;
            [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
            

            /////Setting sp to start of the user_area_page///////
            SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

            /////Updating STATE field and storing inode_index///////
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7]=inode_index;
             
            PTBR = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]; 

            //Allocating new pages and page table entries of the new process
            
            //library
            [PTBR+0]=63;
            [PTBR+1]="0100";
            [PTBR+2]=64;
            [PTBR+3]="0100";
            
            //heap 
            
            [PTBR+4]=-1;
            [PTBR+5]="0000";
            
            [PTBR+6]=-1;
            [PTBR+7]="0000";
            
            
            //stack

            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1=1;
            call MOD_2;
            [PTBR+16]=R0;
            // breakpoint;
            [PTBR+17]="0110";
            multipop(R0,R1,R2,R3,R4,R5,R6);
            
            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1=1;
            call MOD_2;
            // breakpoint;
            [PTBR+18]=R0;
            [PTBR+19]="0110";
            multipop(R0,R1,R2,R3,R4,R5,R6);


            
            //code
            
            ////Allocating code pages corresponding to the no of code blocks used by the file/////
            if([INODE_TABLE+(inode_index*16)+8]!=-1) then
                multipush(R1,R2,R3,R4,R5,R6,R9);
                multipush(EPN);
                R1=5;
                R2=[INODE_TABLE+(inode_index*16)+8];
                // breakpoint;
                call MOD_2;
                multipop(EPN);
                multipop(R1,R2,R3,R4,R5,R6,R9);
                R10 = [INODE_TABLE+(inode_index*16)+8];
                
                [PTBR+8]=R0;
                [PTBR+9]="0100";
            else
                [PTBR+8]=-1;
                [PTBR+9]="0000";
            endif;    
            
            //invalidating other code_pages
            [PTBR+10]=-1;
            [PTBR+11]="0000";

            [PTBR+12]=-1;
            [PTBR+13]="0000";

            [PTBR+14]=-1;
            [PTBR+15]="0000";  
            
            // breakpoint;
            //initializing entry point ip
            [[PTBR+16]*512] = [[PTBR+8]*512 + 1];


            /////////PER-PROCESS RESOURCE TABLE///////////
            alias iter R10;
            iter=0;

            while(iter<16) do
                [(([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512)-16+iter]=-1;
                iter=iter+1;
            endwhile;


            //////////DISK MAP TABLE/////////////
            alias disk_map_table R8;
            disk_map_table = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10;

            [disk_map_table + 0]=-1;
            [disk_map_table + 1]=-1;
            [disk_map_table + 2]=-1;
            [disk_map_table + 3]=-1;
            [disk_map_table + 4]=[INODE_TABLE + (inode_index*16)+8];
            [disk_map_table + 5]=[INODE_TABLE + (inode_index*16)+9];
            [disk_map_table + 6]=[INODE_TABLE + (inode_index*16)+10];
            [disk_map_table + 7]=[INODE_TABLE + (inode_index*16)+11];
            [disk_map_table + 8]=-1;
            [disk_map_table + 9]=-1;


            
            SP = 8*512; ////initializing User Stack////////
            
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
            ireturn;

        endif;
    endif;
    count=count+1;
endwhile;


alias physicalAddrRetVal R8;
physicalAddrRetVal = [PTBR + 2*((userSP - 1)/512)]*512 + ((userSP-1)%512);
[physicalAddrRetVal] = -1;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
ireturn;