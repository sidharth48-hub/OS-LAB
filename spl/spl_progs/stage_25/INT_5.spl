
alias system_call_num R1;
alias process_table R2;
alias userSP R3;
alias ptbr R4;
alias retAddr R5;

process_table = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;
ptbr = [process_table + 14];

userSP = SP;
[process_table + 13]=SP;
SP = [process_table + 11]*512 - 1;


system_call_num = [([ptbr + 2*((userSP - 5)/512)]*512) + (userSP - 5) % 512];

retAddr = ([ptbr + 2*((userSP - 1)/512)]*512) + (userSP - 1) % 512;



//////////OPEN SYSTEM CALL////////
if(system_call_num == 2) then
    
    alias fileName R6;
    fileName = [([ptbr + 2*((userSP - 4)/512)]*512) + (userSP - 4) % 512];
     
    [process_table + 9] = 2;
    
    alias iter R7;
    iter = 0;

    while(iter < 8) do
        if([([process_table + 11]*512) + 496 + 2*iter] == -1) then
            break;
        endif;

        iter = iter + 1;
    endwhile;
    

    //if no free entry exists
    if(iter == 8) then
       
       [retAddr] = -3;
       [process_table + 9] = 0;
       SP = [process_table + 13];
       ireturn;
    endif;
    
    ///calling open/////
    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = 3;
    R2 = fileName;
    call MOD_3;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    if(R0 < 0) then
       [retAddr] = R0;
       [process_table + 9] = 0;
       SP = [process_table + 13];
       ireturn;
    endif;

    [([process_table + 11]*512) + 496 + 2*iter] = FILE;
    [([process_table + 11]*512) + 496 + 2*iter + 1] = R0;

    [process_table + 9] = 0;
    SP = [process_table + 13];

    [retAddr]=iter;
    ireturn;       
endif;



///////////SEEK SYSTEM CALL or CLOSE SYSTEM CALL////////
if(system_call_num == 6 || system_call_num == 3) then
    [process_table + 9] = system_call_num;

    alias fileDescriptor R6;
    fileDescriptor = [([ptbr + 2*((userSP - 4)/512)]*512) + (userSP - 4) % 512];

    alias offset R7;
    offset = [([ptbr + 2*((userSP - 3)/512)]*512) + (userSP - 3) % 512];

    ///checking for validity of the fileDescriptor///
    if(fileDescriptor < 0 || fileDescriptor > 7) then
        [retAddr] = -1;
        [process_table + 9] = 0;
        SP = userSP;
        ireturn;
    endif;
    
    alias per_process_table R8;
    per_process_table = ([process_table + 11])*512 + 496 + 2*fileDescriptor;


    ///checking resource identifier in per_process_table///
    if([per_process_table]==-1 || [per_process_table]!=FILE) then
        [retAddr] = -1;
        [process_table + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias open_file_entry R9;
    open_file_entry = OPEN_FILE_TABLE + [per_process_table + 1]*4;


    if(system_call_num == 6) then
        
        //seek system call//
        
        alias inode_index R10;
        inode_index = [open_file_entry];
    
        ///Acquire inode///
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        R1 = 4;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        
        //if Acquire inode fails//
        if(R0 == -1) then
            [retAddr] = -1;
            SP = userSP;
            [process_table + 9] = 0;
            ireturn;
        endif;
    
        alias lseek R11;
        lseek = [open_file_entry + 2];
    
        alias inode_entry R12;
        inode_entry = INODE_TABLE + inode_index*16;
    
        alias fileSize R13;
    
        if(inode_index == INODE_ROOT) then
            fileSize = 480;
        else
            fileSize = [inode_entry + 2];
        endif;
    
        if(lseek + offset < 0) then
            //release inode//
            multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
            R1 = 5;
            R2 = inode_index;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_0;
            multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
    
            [retAddr] = -2;
            [process_table + 9] = 0;
            SP = userSP;
            ireturn;
        endif;            
    
        ///checking validity of offset//
        if(offset == 0) then
            [open_file_entry + 2] = 0;
        else
            if((lseek + offset) > fileSize) then
                [open_file_entry + 2] = fileSize;
            else
                [open_file_entry + 2] = lseek + offset;
            endif;
        endif;
    
        ///release inode///
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
        R1 = 5;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

    else
        
        //close - file manager module
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        R1 = 4;
        R2 = [per_process_table + 1];
        call MOD_3;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
    
        [([process_table + 11]*512) + 496 + 2*fileDescriptor] = -1;
        [([process_table + 11]*512) + 496 + 2*fileDescriptor + 1] = -1;

    endif;        
    
    [process_table + 9] = 0;
    SP = userSP;
    [retAddr] = 0;

    ireturn;
endif;            
         



