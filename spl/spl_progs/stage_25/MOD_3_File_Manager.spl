alias functionNum R1;

////////BUFFERED WRITE OR BUFFERED READ////
if(functionNum == 1 || functionNum == 2) then
    alias disk_block_number R2;
    alias offset R3;
    alias word R4;

    alias pageNum R5; 
    alias buffer_number R6;
    
    buffer_number = disk_block_number%4;
    pageNum = 71 + buffer_number;

    ///Acquire buffer
    multipush(R1,R2,R3,R4,R5,R6);
    R1 = 1;
    R2 = buffer_number;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6);

    alias buffer_entry R7;
    buffer_entry = BUFFER_TABLE + buffer_number*4;

    if([buffer_entry] != disk_block_number) then
        if([buffer_entry + 1] == 1) then
            
            ///calling disk store///
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = pageNum;
            R4 = [buffer_entry];
            call MOD_4;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            
            [buffer_entry + 1] = 0;
        endif;
        
        //disk load//
        multipush(R1,R2,R3,R4,R5,R6,R7);
        R1 = 2;
        R4 = disk_block_number;
        R3 = pageNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_4;
        multipop(R1,R2,R3,R4,R5,R6,R7);
        
        [buffer_entry] = disk_block_number;
    
    endif;
    
    if(functionNum == 1) then

        //writing to a file
        [pageNum*512 + offset] =  word;
        [buffer_entry + 1] = 1;//DIRTY BIT
    else
        //reading from a file
        //copying data to physical address
        [[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 14] + 2*(word/512)]*512 + (word%512)] = [pageNum*512 + offset];    
    endif;

    //release buffer
    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = 2;
    R2 = buffer_number;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    return;    

endif;



//////OPEN/////////
if(functionNum == 3) then
    
    alias fileName R2;
    
    alias inode_table_entry R3;
    alias index R4;
    index = 0;



    while(index < MAX_FILE_NUM) do
        inode_table_entry = INODE_TABLE + index*16;
        if([inode_table_entry + 1] == fileName) then
            break;
        endif;

        index = index + 1;
    endwhile;
    
    //file not found
    if(index == MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    //calling Acquire inode//////
    multipush(R1,R2,R3,R4);
    R1 = 4;
    R2 = index;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4);
    
    ///if lock fails
    if(R0 == -1) then
       R0 = -1;
       return;
    endif;
    

    ///if file is of type EXEC
    if([inode_table_entry] == EXEC) then

        ///callling release inode////
        multipush(R1,R2,R3,R4);
        R1 = 5;
        R2 = index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4);

        R0 = -1;
        return;
    endif;
    
    alias open_file_index R5;
    alias open_file_entry R6;
    open_file_index = 0;
    
    while(open_file_index < MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE + open_file_index*4] == -1) then
            open_file_entry = OPEN_FILE_TABLE + open_file_index*4;
            break;
        endif;
        
        open_file_index = open_file_index + 1;
    endwhile;

    if(open_file_index == MAX_OPENFILE_NUM) then
        ///callling release inode////
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = 5;
        R2 = index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6);

        R0 = -2;
        return;
    endif;

    if(fileName == "root") then
        [open_file_entry] = INODE_ROOT;
    else
        if([FILE_STATUS_TABLE + index*4 + 1]==-1) then
            [FILE_STATUS_TABLE + index*4 + 1] = 1;
        else
            [FILE_STATUS_TABLE + index*4 + 1] = [FILE_STATUS_TABLE + index*4 + 1] + 1;         
        endif;

        [open_file_entry] = index;//INODE INDEX
    endif;

    [open_file_entry + 1] = 1;//OPEN INSTANCE COUNT
    [open_file_entry + 2] = 0;//LSEEK
    
    ///callling release inode////
    multipush(R1,R2,R3,R4,R5,R6);
    R1 = 5;
    R2 = index;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6);
    
    R0 = open_file_index;
    return;

endif;

//////CLOSE////////
if(functionNum == 4) then
    
    alias open_file_index R2;
    alias open_file_entry R3;
    open_file_entry = OPEN_FILE_TABLE + open_file_index*4;

    alias inode_index R4;

    inode_index = [open_file_entry];

    [open_file_entry + 1] = [open_file_entry + 1] - 1;

    if([open_file_entry + 1] == 0) then
        [open_file_entry] = -1;
        [open_file_entry + 1] = -1;
        [open_file_entry + 2] = -1;
        [open_file_entry + 3] = -1;

        if([INODE_TABLE + inode_index*16] != "root") then
            [FILE_STATUS_TABLE + inode_index*4 + 1] = [FILE_STATUS_TABLE + inode_index*4 + 1] - 1;
            if([FILE_STATUS_TABLE + inode_index*4 + 1] == 0) then
                [FILE_STATUS_TABLE + inode_index*4 + 1] = -1;
            endif;
        endif;    

    endif;

    return;

endif;