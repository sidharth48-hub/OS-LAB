alias system_call_num R1;
alias process_table R2;
alias userSP R3;
alias ptbr R4;
alias retAddr R5;

process_table = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;
ptbr = [process_table + 14];

userSP = SP;
[process_table + 13]=SP;
SP = [process_table + 11]*512 - 1;


system_call_num = [([ptbr + 2*((userSP - 5)/512)]*512) + (userSP - 5) % 512];



retAddr = ([ptbr + 2*((userSP - 1)/512)]*512) + (userSP - 1) % 512;

[process_table + 9] = system_call_num;


///////LOGOUT SYSTEM CALL//////
if(system_call_num == 28) then
    
    //if current process not shell
    if([SYSTEM_STATUS_TABLE + 1] != 2) then
        [retAddr] = -1;
        [process_table + 9] = 0;
        SP = [process_table + 13];
        ireturn;
    endif;
    
    ///calling KILL_ALL 
    multipush(R1,R2,R3,R4,R5);
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    multipop(R1,R2,R3,R4,R5);
    

    //setting shell process to TERMINATED
    [process_table + 4] = TERMINATED;
    

    //setting the top of the stack to the entry of the shell program
    [[[process_table + 14] + 16]*512] = [[[process_table + 14] + 8]*512 + 1];
    [process_table + 13] = 8*512;


    ///waking up login process
    [PROCESS_TABLE + 1*16 + 4] = READY;
    
    [SYSTEM_STATUS_TABLE] = 0;

    multipush(R1,R2,R3,R4,R5);
    call MOD_5;
    multipop(R1,R2,R3,R4,R5);

endif;    