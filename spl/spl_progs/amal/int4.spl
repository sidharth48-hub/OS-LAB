
// At the beginning of interrupt routine 14, extract the system call number from the user stack and switch to the kernel stack.
alias userSP R1;
alias systemCallNum R2;
alias processTableEntryAddress R3;

processTableEntryAddress = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
// Save the user stack pointer in the process table
[processTableEntryAddress + 13]= SP;

// switch to the kernel stack
SP = [processTableEntryAddress + 11] * 512  - 1 ;
PTBR = [processTableEntryAddress + 14] ;

userSP = [processTableEntryAddress + 13];
systemCallNum = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;

// Change the MODE FLAG in the process tableto the system call number.
[processTableEntryAddress + 9] = systemCallNum;



// Extract the filename from the user stack. 
alias fileName R4;
fileName  = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;

alias returnAddress R5;
returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;





if(systemCallNum == 1) then //  Create

    // If the file is present in the system, return 0.   /* Check the Inode Table  */ 
    alias iter R9;
    iter = 0;
    alias inodeTableEntryAddress R6;

    // Checking if file is already found in the Inode Table
    while(iter < MAX_FILE_NUM) do // 60
        inodeTableEntryAddress = INODE_TABLE + iter*16;
        if([inodeTableEntryAddress+1] == fileName) then

            //  return to the user mode with 0 stored as return value indicating failure.
            [returnAddress] = 0;

            // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
            [processTableEntryAddress + 9] = 0;
            SP = [processTableEntryAddress + 13];
            ireturn;
            
        endif;
        iter = iter + 1;
    endwhile;

    // Find the index of a free entry in the Inode Table. 
    alias freeInodeIndex R7;
    iter = 0;
    freeInodeIndex = -1;
    while(iter < MAX_FILE_NUM) do // 60
        inodeTableEntryAddress = INODE_TABLE + iter*16;
        if([inodeTableEntryAddress+1] == -1) then
            freeInodeIndex = iter;
            break;
        endif;
        iter = iter + 1;
    endwhile;

    // If no free entry found, return -1.   ( Maximum number of files reached )
    if(freeInodeIndex == -1) then
        //  return to the user mode with -1 stored as return value indicating failure.
        [returnAddress] = -1;

        // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
        [processTableEntryAddress + 9] = 0;
        SP = [processTableEntryAddress + 13];
        ireturn;
    endif;

    // In the Inode Table entry found above, set FILE NAME to the given file name, FILE SIZE to 0 and FILE TYPE to DATA.
    [inodeTableEntryAddress] = DATA; // File Type
    [inodeTableEntryAddress+1] = fileName; // File Name
    [inodeTableEntryAddress+2] = 0; // File Size

    
    // In the Inode Table entry, set the block numbers to -1.  ( No disk blocks are allocated to the file )
    [inodeTableEntryAddress+8] = -1;
    [inodeTableEntryAddress+9] = -1;
    [inodeTableEntryAddress+10] = -1;
    [inodeTableEntryAddress+11] = -1;
    
    // Set the USER ID to the USERID of the process /* See the process table for user id */
    [inodeTableEntryAddress+3] = [processTableEntryAddress+3];

    // Extract the permission from the user stack. 
    alias permission R8;
    permission  = [[PTBR + 2*((userSP-3)/512)] * 512 + ((userSP-3)%512)] ;
    
    // Set the PERMISSION to the permission supplied as input.
    [inodeTableEntryAddress+4] = permission;

    // In the Root file entry corresponding to the Inode Table index, 
    alias rootFileEntryAddress R6;
    rootFileEntryAddress = ROOT_FILE + freeInodeIndex*8;
    

    // set the FILE NAME, FILE SIZE, FILE TYPE, USERNAME and PERMISSION fields.
    [rootFileEntryAddress] = fileName; // File Name 
    [rootFileEntryAddress+1] = 0; // File Size
    [rootFileEntryAddress+2] = DATA; // File Type  
    [rootFileEntryAddress+3] = [USER_TABLE + [processTableEntryAddress+3]*2]; // User Name
    [rootFileEntryAddress+4] = permission; // Permission 

endif;

if(systemCallNum == 4) then // Delete
    // Find the index of the file in the Inode Table.
    alias iter R5;
    iter = 0;
    alias inodeTableEntryAddress R6;
    alias inodeIndexOfFile R7;
    inodeIndexOfFile = -1;

    // Iterating through the  Inode Table to find the index of the file in the Inode table
    while(iter < MAX_FILE_NUM) do // 60
        inodeTableEntryAddress = INODE_TABLE + iter*16;
        if([inodeTableEntryAddress+1] == fileName) then
            inodeIndexOfFile = iter;
            break;
        endif;
        iter = iter + 1;
    endwhile;


    // If file is not present in the Inode Table, return 0. 
    if(inodeIndexOfFile == -1) then
        //  return to the user mode with 0 stored as return value indicating success.
        [returnAddress] = 0;

        // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
        [processTableEntryAddress + 9] = 0;
        SP = [processTableEntryAddress + 13];
        ireturn;
    endif;


    // If the file is not a DATA file, return -1.
    if([inodeTableEntryAddress] != DATA ) then
        //  return to the user mode with -1 stored as return value indicating failure.
        [returnAddress] = -1;

        // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
        [processTableEntryAddress + 9] = 0;
        SP = [processTableEntryAddress + 13];
        ireturn;
    endif;


    
    // When a file is created by a process using the Create system call, the process can set its permission to exclusive(value = 0)/open-access(value = 1), to restrict access permissions. 

    // If the exclusive permission is set
        // if the current user is not root (root user ID is 1) and the current user does not own the file 
            // return -1. 
    if([inodeTableEntryAddress+4] == 0) then
        if( [SYSTEM_STATUS_TABLE] != 1 && [inodeTableEntryAddress+3] != [SYSTEM_STATUS_TABLE]) then
            //  return to the user mode with -1 stored as return value indicating failure.
            [returnAddress] = -1;

            // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
            [processTableEntryAddress + 9] = 0;
            SP = [processTableEntryAddress + 13];
            ireturn;
        endif;
    endif;



    // Acquire a lock on the file by calling the acquire_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = ACQUIRE_INODE;
    R2 = inodeIndexOfFile;
    R3 = [SYSTEM_STATUS_TABLE+1];
    multipop(R1,R2,R3,R4,R5,R6,R7);

    
    // Check if the the file open count is -1 in the  File Status Table . If not, release the lock and return -2.    
    // File is open, cannot be deleted
    if([FILE_STATUS_TABLE +  inodeIndexOfFile*4 +1] != -1) then

        // release the lock and return -2
        multipush(R1,R2,R3,R4,R5,R6,R7);
        R1 = RELEASE_INODE;
        R2 = inodeIndexOfFile;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7);

        //  return to the user mode with -2 stored as return value indicating failure.
        [returnAddress] = -1;

        // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
        [processTableEntryAddress + 9] = 0;
        SP = [processTableEntryAddress + 13];
        ireturn;

    endif;



    // For each disk block allocated to the file, do {   ( Check Inode Table )
    //     If the disk block is loaded into a buffer, and the DIRTY BIT is set, reset the dirty bit. 
    //     ( Check the Buffer Table )
    //     Call the release_block() function in the Memory Manager module to free the disk block.        
    // }

    alias diskBlockNumber R8;
    alias bufferTableEntryAddress R9;
    iter = 8;
    while(iter < 12) do
        diskBlockNumber = [INODE_TABLE + iter* 16 + iter];
        if(diskBlockNumber != -1) then // if Disk block is alloted

            // When a process reads/writes into a file, the relevant disk block is first brought into a memory buffer by the OS and the read/write operation is performed on the buffer. The OS reserves MAX_BUFFER number of memory pages as buffers. The buffer table is a data structure that stores the information regarding the disk block stored in each buffer. The present version of eXpOS sets MAX_BUFFER = 4. Each buffer is identified by its index in the buffer table.
            // Since all the 4 buffer pages are shared by all the files in the file system, a buffer page may be required to be replaced by another disk block. In this case, write-back is performed only if the page is modified. The dirty bit indicates whether the page has been modified. When a disk block is required to be brought into the buffer, the buffer to which it must be loaded is identifed by the formula :
            // Buffer_number = Disk_block_number % MAX_BUFFER
            bufferTableEntryAddress = BUFFER_TABLE + (diskBlockNumber % MAX_BUFFER) * 4;
            if([bufferTableEntryAddress] == diskBlockNumber && [bufferTableEntryAddress+1] == 1) then // if DIRTY BIT is set
                [bufferTableEntryAddress+1] = 0; // reset the dirty bit
            endif;

            // Call the release_block() function in the Memory Manager module to free the disk block.        
            multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
            R1 = RELEASE_BLOCK;
            R2 = diskBlockNumber;
            R3 = [SYSTEM_STATUS_TABLE+1];
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7, R8,R9);

        endif;
        iter = iter + 1;
    endwhile;


    // Invalidate (set to -1) the Inode Table of the file.
    iter = 0;
	while(iter<16) do
		[inodeTableEntryAddress+ iter] = -1;
		iter = iter + 1;
	endwhile;

    // Update the Root file by invalidating the entry for the file.
    // Invalidating entry in root file
	[ROOT_FILE + inodeIndexOfFile*8] = -1;


    // Release the lock on the file by calling the release_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = RELEASE_INODE;
    R2 = inodeIndexOfFile;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7);



endif;

// return to the user mode with 0 stored as return value indicating success.
[returnAddress] = 0;
// At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
[processTableEntryAddress + 9] = 0;
SP = [processTableEntryAddress + 13];
ireturn;

