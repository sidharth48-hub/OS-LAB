// Interrupt 12 Logout
// Arguements are none
// Return ValueÂ¶
// -1 on error, otherwise does not return

// At the beginning of interrupt routine 17, extract the system call number from the user stack and switch to the kernel stack.
alias userSP R1;
alias processTableEntryAddress R2;
alias returnAddress R3;
alias systemCallNum R4;

processTableEntryAddress = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
// Save the user stack pointer in the process table
[processTableEntryAddress + 13]= SP;

userSP = [processTableEntryAddress + 13];
// switch to the kernel stack
SP = [processTableEntryAddress + 11] * 512  - 1 ;
PTBR = [processTableEntryAddress + 14] ;

// Extract System call number from the user stack
systemCallNum = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;

// Change the MODE FLAG in the process tableto the system call number.
[processTableEntryAddress + 9] = systemCallNum;



returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;

if(systemCallNum == 28) then // Logout
    // If the PID of the current process is not 2 return -1 (Not shell process)

    if([SYSTEM_STATUS_TABLE+1] != 2) then
        [returnAddress] = -1;

        // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
        [processTableEntryAddress + 9] = 0;
        SP = [processTableEntryAddress + 13];
        ireturn;
    endif;


    // Kill all user processes except the shell by calling the kill_all() function in the Process Manager module.
    multipush(R1,R2,R3,R4);
    R1 = KILL_ALL;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    multipop(R1,R2,R3,R4);

    // Set the STATE of the current process(shell) in the process table to TERMINATED.
    [processTableEntryAddress + 4] = TERMINATED;

    // Shell should be set ready to run when the next user logs in. 
    // Obtain the entry point IP value from the header of the shell program. Place it in the beginning (logical addesss 4096) 
    // of the stack of the shell(current process). Reset the USERSP field of the shell to 4096.
    [[[processTableEntryAddress+14] + 16]*512] = [[[processTableEntryAddress+14] + 8]*512 + 1];
    [processTableEntryAddress + 13] = 8*512;

    
    // Wake up the Login process by changing STATE in it's process table entry to READY.
    [PROCESS_TABLE +16*1+ 4] = READY;

    // In system status table, reset the CURRENT_USER_ID field back to 0 (kernel).
    [SYSTEM_STATUS_TABLE] = 0;

    // Invoke the context_switch() function in the Scheduler Module.
    // multipush(R1,R2,R3,R4,R5,R6,R7); // Save the registers
    call SCHEDULER;
    // multipop(R1,R2,R3,R4,R5,R6,R7); // Restore the registers
endif;

// At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
[processTableEntryAddress + 9] = 0;
SP = [processTableEntryAddress + 13];
ireturn;

