
alias userSP R1;
alias processTableEntryAddress R3;
processTableEntryAddress = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
// Save the user stack pointer in the process table
[processTableEntryAddress + 13]= SP;

// switch to the kernel stack
SP = [processTableEntryAddress + 11] * 512  - 1 ;
PTBR = [processTableEntryAddress + 14] ;

userSP = [processTableEntryAddress + 13];

// Change the MODE FLAG in the process tableto the system call number.
[processTableEntryAddress + 9] = 21;

// Shutdown system call can be invoked only from the shell process of the root user. If the current process is not shell (PID in the process table is not equal to 2) or the current user is not root user (USERID in the process table is not equal to 1) then store -1 as return value, reset the MODE FLAG, change the stack to user stack and return to user mode.
if ([processTableEntryAddress + 1] != 2 || [processTableEntryAddress + 3] != 1) then
    
     //  return to the user mode with -1 stored as return value indicating failure.
    [[PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512)] = -1;

    // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
    [processTableEntryAddress + 9] = 0;
    SP = [processTableEntryAddress + 13];
    ireturn;
endif;


// Final Version Commit the inode table, root file, user table and disk free list to the disk by calling the disk_store() function in the Device Manager Module.


// Commit the changes made in the memory copies of the inode table (along with user table), the root file and the disk free list by storing them back to the disk invoking the Disk Store function of device manager module . 
// Refer to disk/memory organization for block and page numbers of these data structures.
// DISK_STORE arguements PID, Page Number, Block Number	

multipush(R1,R2,R3);
//inode table
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;

// inode table + user table
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;


//root file

R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;



//disk free list
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;


// Invoke Kill All function of process manager module . Kill All terminates all the processes except IDLE, INIT and the process calling Shutdown.
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;

multipop(R1,R2,R3);


// Loop through the Buffer Table
//     If the buffer is dirty
//        Commit changes to the disk by calling the disk_store() function in the Device Manager module.

alias bufferTableEntryAddress R4;
alias bufferNumber R5;
bufferNumber = 0;
while (bufferNumber < MAX_BUFFER) do
    bufferTableEntryAddress = BUFFER_TABLE + bufferNumber * 4;
    
    // if the buffer is dirty
    
    if ([bufferTableEntryAddress + 1] == 1) then
        multipush(R1,R2,R3,R4,R5);
        // Arguements are PID, Page Number, Block Number	
        R1 = DISK_STORE;
        R2 = [SYSTEM_STATUS_TABLE+1]; //  PID
        R3 = BUFFER_BASE + bufferNumber; // Page Number
        R4 = [bufferTableEntryAddress]; // Block Number
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5);

        // Mark the buffer as clean in the corresponding buffer table entry (reset dirty bit)
        [bufferTableEntryAddress + 1] = 0;
    endif;
    bufferNumber = bufferNumber + 1;
endwhile;


// Finally, halt the system using the SPL statement halt.
halt;