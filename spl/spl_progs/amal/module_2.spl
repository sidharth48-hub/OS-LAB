alias functionNum R1;

// breakpoint;
if(functionNum == GET_FREE_PAGE) then
    // Arguements are NIL
    // Increment WAIT_MEM_COUNT field in the system status table. //Do not increment the WAIT_MEM_COUNT in busy loop (an important step )
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;
    while([SYSTEM_STATUS_TABLE+2] == 0)do
        // Set the state of the invoked process as WAIT_MEM.
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_MEM;
        multipush(R1,R2);    
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;

    // Decrement the WAIT_MEM_COUNT field and MEM_FREE_COUNT field in the system status table. Note the sequence - increment WAIT_MEM_COUNT, waiting for the memory, decrement WAIT_MEM_COUNT.
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]  - 1;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]  - 1;


    // Find a free page using memory free list and set the corresponding entry as 1. Make sure to store the obtained free page number in R0 as return value.
    alias page R3;
    alias count R4;
    page = MEMORY_FREE_LIST;
    count = 0;

    while(count < MAX_MEM_PAGE)do
        page = MEMORY_FREE_LIST + count;
        if([page] == 0)then
            [page] = [page]+1;
            break;
        endif;
        count = count + 1;
    endwhile; 

    if(count >= MAX_MEM_PAGE)then
        page =-1;
    endif;
    R0=count;


endif;

if(functionNum ==  RELEASE_PAGE) then
    // Arguements are Page Number	
    alias pageNumber R2;
    // The Page number to be released is present in R2. Decrement the corresponding entry in the memory free list.
    [MEMORY_FREE_LIST+pageNumber] = [MEMORY_FREE_LIST+pageNumber]-1;
    
    if([MEMORY_FREE_LIST+pageNumber] == 0) then
        // If that entry in the memory free list becomes zero, then the page is free. So increment the MEM_FREE_COUNT in the system status table.
        [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] + 1;
    endif;

    // Update the STATUS to READY for all processes (with valid PID) which have STATUS as WAIT_MEM.
   
    alias count R3;
    count = 0;
    while(count < 16)do
        if([PROCESS_TABLE+count*16+4] == WAIT_MEM)then
            [PROCESS_TABLE+count*16+4] = READY;
        endif;
        count = count + 1;
       
    endwhile;
 
endif;

//GET CODE PAGE
if(functionNum ==  GET_CODE_PAGE) then // 5
    // Arguements are Block Number	
    alias blockNumber R2;
    // Check the disk map table entries ofall the processes, if the given block number is present in any entry and the corresponding page table entry is valid then return the memory page number
    alias iter R3;
    iter = 0;
    while(iter < MAX_PROC_NUM)do
        alias offset R4;
        alias ptbr R5;
        ptbr = [PROCESS_TABLE + iter * 16 + 14 ];
        offset = 0;
        // check if entry is already present 
        while(offset < 4) do
            if([DISK_MAP_TABLE + iter *10 + 4 + offset] == blockNumber && [ptbr + 8 + offset*2] != -1) then
                // if entry is present then return the corresponding page number from the 
                R0 = [ptbr + 8 + offset*2];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
            offset = offset + 1;
        endwhile;
        iter = iter + 1;
    endwhile;


    // if not found then get free page from memroy and return that
    multipush(R1,R2,R3);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER; // memory manager
    multipop(R1,R2,R3);
    // calling DISK_LOAD
    multipush(R0,R1,R2,R3);
    R1 = DISK_LOAD;
    R4 = blockNumber;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = R0;
    call DEVICE_MANAGER; // DEVICE_MANAGER 
    multipop(R0,R1,R2,R3);


endif;

if(functionNum ==  RELEASE_BLOCK) then // 4
    // Arguements are Block Number, PID	
    alias blockNumber R2;
    alias processId R3;

    [DISK_FREE_LIST + blockNumber] = [DISK_FREE_LIST + blockNumber] - 1;

endif;

if(functionNum == GET_FREE_BLOCK) then 
    // Arguements are NIL
    // loop through entries in the Disk Free List from DISK_FREE_AREA to DISK_SWAP_AREA - 1 ( User Block, not preallocated to the OS or swap area )
    alias iter R2;
    iter = DISK_FREE_AREA;
    // if a free entry is found in the DISK FREE LIST  set the entry as 1 and then return the corresponding block number
    while(iter < DISK_SWAP_AREA)do
        if([DISK_FREE_LIST + iter] == 0) then
            [DISK_FREE_LIST + iter] = 1;
            R0 = iter;
            return;
        endif;
        iter = iter + 1;
    endwhile;
    R0 = -1;
endif;

if(functionNum == GET_SWAP_BLOCK) then
    // Arguements are NIL
    // Returns blockNumber
    
    // loop through entries in the Disk Free List from DISK_SWAP_AREA to DISK_SIZE - 1{    /* swap area */
    alias iter R2;
    R0 = -1;
    iter = 0;
    while(DISK_SWAP_AREA +iter < DISK_SIZE) do
        if([DISK_FREE_LIST+DISK_SWAP_AREA +iter] == 0) then
            [DISK_FREE_LIST+DISK_SWAP_AREA +iter]=1;
            R0 = DISK_SWAP_AREA+iter;
            break;
        endif;
        iter = iter +1;
    endwhile;

endif;

return;