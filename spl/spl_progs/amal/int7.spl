alias processTableEntryAddress R1;
processTableEntryAddress = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16);

// Set the MODE FLAG field in the process table to the system call number which is 6 for write system call.
[processTableEntryAddress + 9] = 5;

// Store the value of register SP in the UPTR field of the process table entry of the current process.
[processTableEntryAddress + 13] = SP;

// Save the value of register SP as userSP.
alias userSP R2;
userSP=SP;

// Initialize SP (kernel stack pointer) to (user area page number)*512 -1.
SP = [processTableEntryAddress+ 11] * 512 - 1;

PTBR = [processTableEntryAddress+ 14];



alias fileDescriptor R3;
alias returnAddress R4;


//Retrieve the file descriptor from the user stack, stored at userSP-4.
fileDescriptor = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;
returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;


if(fileDescriptor == -2) then

    //code when argument 1 is valid
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
    
    // print word; instead of print we are going  
    multipush(R0, R1, R2, R3, R4, R5); // number of registers will depend on your code
    R1 = TERMINAL_WRITE;
    R2 = [SYSTEM_STATUS_TABLE + 1]; // PID
    R3 = word; // word to be printed
    call DEVICE_MANAGER; //MOD_4

    // Ignore the value present in R0 as Terminal Write does not have any return value.

    multipop(R0, R1, R2, R3, R4, R5); // number of registers will depend on your code

   
else
  
    //  If file descriptor is invalid, return -1.     File descriptor value should be within the range 0 to 7 (both included). 
    if(fileDescriptor<0 || fileDescriptor>7) then
        [returnAddress] = -1;
        // setting the mode flag back to zero
        [processTableEntryAddress + 9] = 0;
        // Change SP back to user stack and return to the user mode.
        SP = [processTableEntryAddress + 13] ;
        ireturn;
    endif;
	
    // Locate the Per-Process Resource Table Entry of the current process.
    alias perProcessResouceTableEntry R5;
    perProcessResouceTableEntry = [processTableEntryAddress + 11]  * 512  + RESOURCE_TABLE_OFFSET + 2*fileDescriptor;


    // If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, return -1.  
    // No file is open with this file descriptor. 
    if([perProcessResouceTableEntry] == -1 || [perProcessResouceTableEntry] != FILE) then
        [returnAddress] = -1;
        // setting the mode flag back to zero
        [processTableEntryAddress + 9] = 0;
        // Change SP back to user stack and return to the user mode.
        SP = [processTableEntryAddress + 13] ;
        ireturn;
    endif;


    // Get the index of the Open File Table entry from the Per Process Resource Table entry.
    // Get the index of the Inode Table entry from the Open File Table entry. ([openFileTableEntry+1])
    alias openFileTableEntry R6;
    alias inodeIndexOfFile R7;
    alias inodeTableEntryAddress R8;
    alias userId R9;
    openFileTableEntry = OPEN_FILE_TABLE + [perProcessResouceTableEntry + 1] * 4;
    inodeIndexOfFile = [openFileTableEntry ];
    inodeTableEntryAddress = INODE_TABLE + inodeIndexOfFile * 16;
    userId = [processTableEntryAddress+3];

    // If the exclusive permission is set
        // if the current user is not root (root user ID is 1) and the current user does not own the file and the exclusive permisttion is set
            // return -3. 
    if([inodeTableEntryAddress+4] == EXCLUSIVE) then
        if( userId != 1 && [inodeTableEntryAddress+3] != userId && [inodeTableEntryAddress+4] == EXCLUSIVE) then
            //  return to the user mode with -3 stored as return value indicating failure.
            [returnAddress] = -3;

            // At any point of return to user, remember to reset the MODE FLAG and change the stack to user stack.
            [processTableEntryAddress + 9] = 0;
            SP = [processTableEntryAddress + 13];
            ireturn;
        endif;
    endif;


    // Acquire the Lock on the File by calling the acquire_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = ACQUIRE_INODE;
    R2 = inodeIndexOfFile;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);

    
    // If acquiring the inode fails, return -1.
    if(R0 == -1) then
        [returnAddress] = -1;
        // setting the mode flag back to zero
        [processTableEntryAddress + 9] = 0;
        // Change SP back to user stack and return to the user mode.
        SP = [processTableEntryAddress + 13] ;
        ireturn;
    endif;

    // Get the Lseek position from the Open File Table entry.([openFileTableEntry+2])


    // Get the physical address curresponding to the logical address of Memory Buffer address given as input.
    alias logicalAddressOfMemoryBuffer R9;
    logicalAddressOfMemoryBuffer = [([PTBR + 2* ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)] ;
    // alias physicalAddressOfMemoryBuffer R10;
    // physicalAddressOfMemoryBuffer = [PTBR + 2 * (logicalAddressOfMemoryBuffer/512)] * 512 + (logicalAddressOfMemoryBuffer%512);

     
    // If lseek position is same as the max file size, release_inode() and return -2.  /* End of maximum file size limit reached */
    if([openFileTableEntry+2] == MAX_FILE_SIZE) then
        // calling RELEASE_INODE
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        // Arguements are Inodeindex, PID	
        R1 = RELEASE_INODE;
        R2 = inodeIndexOfFile;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9, R10);

        [returnAddress] = -2;
        // setting the mode flag back to zero
        [processTableEntryAddress + 9] = 0;
        // Change SP back to user stack and return to the user mode.
        SP = [processTableEntryAddress + 13] ;
        ireturn;

    endif;

    // If the Lseek position is a multiple of 512 and the same as File size in the inode table ( New block to be allocated )

    if([openFileTableEntry+2]%512 == 0 && [inodeTableEntryAddress+2] ==[openFileTableEntry+2] ) then
        // Get a free disk block by calling the GET FREE BLOCK function in the Memory Manager module.
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        // Arguements are None
        R1 = GET_FREE_BLOCK;
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9, R10);
        // return value in R0 is Free Block Number or -1

        // If no free disk block is found RELEASE_INODE and return -2. 
        if( R0 ==  -1) then
            // calling RELEASE_INODE
            multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9, R10);
            // Arguements are Inodeindex, PID	
            R1 = RELEASE_INODE;
            R2 = inodeIndexOfFile;
            R3 = [SYSTEM_STATUS_TABLE+1];
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9, R10);

            [returnAddress] = -2;
            // setting the mode flag back to zero
            [processTableEntryAddress + 9] = 0;
            // Change SP back to user stack and return to the user mode.
            SP = [processTableEntryAddress + 13] ;
            ireturn;

        endif;

        // Set the new disk block found in the corresponding (lseek / 512) disk block field  in the Inode table entry.
        [inodeTableEntryAddress + 8 + [openFileTableEntry+2]/512] = R0;

    endif;


    // Find the disk block number and the position in the block from which input is to be written.
    //    Get the block index from lseek position.   (lseek/512 gives the index of the block ) 
    //    Get the disk block number corresponding to the block index from the Inode Table .
    //    Get the offset value from lseek position.   (lseek%512 gives the position to be written to.)
    


    // Read the data from the File Buffer by calling the buffered_read() function in the File Manager module.
    // arguments are Disk Block Number, Offset, Memory Address
    multipush(R1,R2,R3,R4,R5,R6,R7,R8, R9, R10);
    R1 = BUFFERED_WRITE;
    R2 = [INODE_TABLE + inodeIndexOfFile*16 + 8 + [openFileTableEntry+2]/512];
    R3 = [openFileTableEntry+2]%512;
    R4 = logicalAddressOfMemoryBuffer;
    call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8, R9, R10);


    // If Lseek equals file size, increment file size in the inode table entry and also in the memory copy of the root file.
    if([openFileTableEntry+2] == [inodeTableEntryAddress+2]) then

        [inodeTableEntryAddress+2] = [inodeTableEntryAddress+2] + 1;
        [ROOT_FILE + inodeIndexOfFile*8+1] = [ROOT_FILE  + inodeIndexOfFile*8+1] + 1;

    endif;

    // Increment the Lseek position in the Open File Table.
    [openFileTableEntry+2] = [openFileTableEntry+2] + 1;



    //  Release the Lock on the File by calling the release_inode() function in the Resource Manager module.
    // calling RELEASE_INODE
    multipush(R1,R2,R3,R4,R5,R6,R7,R8, R9, R10);
    R1 = RELEASE_INODE;
    R2 = inodeIndexOfFile;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8, R9, R10);




endif;


// Return 0.
[returnAddress] = 0;

// setting the mode flag back to zero
[processTableEntryAddress + 9] = 0;
// Change SP back to user stack and return to the user mode.
SP = [processTableEntryAddress + 13] ;
ireturn;
