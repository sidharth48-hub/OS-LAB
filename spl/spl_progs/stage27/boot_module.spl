//exception handler load
loadi(2,15);
loadi(3,16);

//timer interrupt routine load
loadi(4,17);
loadi(5,18);

//console interrupt load
loadi(8,21);
loadi(9,22);

//disk interrupt load
loadi(6,19);
loadi(7,20);

//int4 load
loadi(10,23);
loadi(11,24);

//int5 load
loadi(12,25);
loadi(13,26);

//int6 load
loadi(14,27);
loadi(15,28);

//int7 load
loadi(16,29);
loadi(17,30);

//int8 load
loadi(18,31);
loadi(19,32);

//int9 load
loadi(20,33);
loadi(21,34);

//int 10 load
loadi(22,35);
loadi(23,36);

//int 11 load
loadi(24,37);
loadi(25,38);

//int 12 load
loadi(26,39);
loadi(27,40); 

//int 13 load
loadi(28,41);
loadi(29,42);

//int 14 load
loadi(30,43);
loadi(31,44);

//int 15 load
loadi(32,45);
loadi(33,46);

//int 16 load
loadi(34,47);
loadi(35,48);

//int 17 load
loadi(36,49);
loadi(37,50);

//library load
loadi(63,13);
loadi(64,14);

//module 0 load
loadi(40,53);
loadi(41,54);

//module 1 load
loadi(42,55);
loadi(43,56);

//module 2 load
loadi(44,57);
loadi(45,58);

//module 3 load
loadi(46,59);
loadi(47,60);

//module 4 load
loadi(48,61);
loadi(49,62);

//module 5 load
loadi(50,63);
loadi(51,64);

//module 6 load
loadi(52,65);
loadi(53,66);

//inode table load
loadi(59,3);
loadi(60,4);

//disk free list load
loadi(61,2);

//load root file
loadi(62,5);

//load shell program
loadi(67,9);
loadi(68,10);

//init program load
loadi(65,7);




[TERMINAL_STATUS_TABLE]=0;

//////////////////////INIT PROGRAM////////////////////////////

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

alias process_table R1;
process_table = PROCESS_TABLE + 16;

[process_table + 0] = 0;//TICK
[process_table + 1] = 1; //PID(process id)
[process_table + 3] = 1;
[process_table + 4] = CREATED; //STATE OF THE PROCESS
[process_table + 11] = 77; //USER AREA PAGE
[process_table + 12] = 0; //KPTR
[process_table + 13] = 8*512; //UPTR
[process_table + 14] = PTBR;
[process_table + 15] = PTLR;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=66;
[PTBR+17]="0110";
[PTBR+18]=-1;
[PTBR+19]="0000";


[66*512] = [65*512 + 1];



////////////////////////SHELL PROCESS///////////////////////////////////


PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

process_table = PROCESS_TABLE + 2*16;

[process_table + 0] = 0;//TICK
[process_table + 1] = 2; //PID(process id)
[process_table + 2] = 1;//PPID
[process_table + 4] = TERMINATED; //STATE OF THE PROCESS
[process_table + 11] = 80; //USER AREA PAGE
[process_table + 12] = 0; //KPTR
[process_table + 13] = 8*512; //UPTR
[process_table + 14] = PTBR; 
[process_table + 15] = PTLR; 


//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code
[PTBR+8]=67;
[PTBR+9]="0100";
[PTBR+10]=68;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=78;
[PTBR+17]="0110";
[PTBR+18]=79;
[PTBR+19]="0110";

[78*512] = [67*512 + 1];

alias disk_mp_entry R2;
disk_mp_entry = DISK_MAP_TABLE + 2*10;

alias iter R3;
iter = 0;

while(iter < 10) do
   [disk_mp_entry + iter] = -1;
   iter = iter + 1;
endwhile;

[disk_mp_entry + 4] = 9;
[disk_mp_entry + 5] = 10;




//////////// INITIALIZE STATE OF OTHER PROCESSES/////////////////

iter = 3;

while(iter < 15) do
   [PROCESS_TABLE + iter*16] = 0;
   [PROCESS_TABLE + iter*16 + 4] = TERMINATED;
   iter = iter + 1;
endwhile;



//////////INITIALIZE MEMORY_FREE_LIST////////////

iter=0;

while(iter<128) do
   
    if(iter <= 82) then 
        [MEMORY_FREE_LIST + iter] = 1;
    else
        [MEMORY_FREE_LIST + iter] = 0;
    endif;    
    
    iter=iter+1;
endwhile;   


[SYSTEM_STATUS_TABLE + 2] = 45; ///mem_free_count
[SYSTEM_STATUS_TABLE + 3] = 0; ///wait_mem_count
[SYSTEM_STATUS_TABLE + 4] = 0;//swapped_count
[SYSTEM_STATUS_TABLE + 5] = 0;//page_status


[DISK_STATUS_TABLE]=0;//STATUS
[TERMINAL_STATUS_TABLE] = 0;

//////////SEMAPHORE_TABLE/////////////

iter = 0;

while(iter < MAX_SEM_COUNT) do
   [SEMAPHORE_TABLE + iter*4] = -1;
   [SEMAPHORE_TABLE + iter*4  + 1] = 0;

   iter = iter + 1;
endwhile;

////////////OPEN_FILE_TABLE////////

iter = 0;

while(iter < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + iter*4] = -1;
    [OPEN_FILE_TABLE + iter*4 + 1] = 0;

    iter = iter + 1;
endwhile;    


/////////////BUFFER_TABLE//////////////

iter = 0;

while(iter < MAX_BUFFER) do
   [BUFFER_TABLE + iter*4] = -1; //BLOCK NUMBER
   [BUFFER_TABLE + iter*4 + 1] = 0;//DIRTY BIT
   [BUFFER_TABLE + iter*4 + 2] = -1;//LOCKING PID

   iter = iter + 1;
endwhile;



//////////FILE_STATUS_TABLE////////

iter = 0;

while(iter < MAX_FILE_NUM) do
   [FILE_STATUS_TABLE + iter*4] = -1;
   [FILE_STATUS_TABLE + iter*4 + 1] = -1;

   iter = iter + 1;
endwhile;



////////////PER PROCESS RESOURCE TABLE OF SHELL PROCESS////////

iter = 0;
while(iter < 16) do
   [(80*512) + 496 + iter] = -1;
   [(77*512) + 496 + iter] = -1;
   iter = iter + 1;
endwhile;   

return;


