// breakpoint;
//Load the timer interrupt routine from disk blocks 17 and 18 to memory pages 4 and 5.
loadi(4, 17);
loadi(5, 18);

// Load Library Code from disk to memory
loadi(63,13);
loadi(64,14);

// Add code in the OS startup code to load INT7 from disk to memory.
loadi(16,29);
loadi(17,30);

// Change virtual memory model such that code occupies logical pages 4 and 5 and the stack lies in logical page 8. You will have to modify the user program as well as the os startup code.
// Load the INIT program from the disk to the memory.
// In Disk 65-66 , in memory 7 - 8
loadi(65,7);
loadi(66,8);

// Load the EXEC program from the disk to the memory.
// In Disk 70 - 71 , in memory 7 - 8
loadi(85, 70);
loadi(86, 73);

// Load the EXEC  2 program from the disk to the memory.
// In Disk 70 - 71 , in memory 7 - 8
loadi(94, 71);
loadi(95, 72);


//Load the INT10 module from the disk to the memory.
// 35 - 36	Interrupt 10 Routine: Exit	2 in Disk
// 22 - 23	Interrupt 10 Routine: Exit	11264 - 12287 1024 in Memory

loadi(22,35);
loadi(23,36);

// Load the exception handler routine from the disk to the memory.
// 5 - 16	Exception Handler	2
// 2 - 3	Exception Handler	1024 - 2047	1024 in Memory
loadi(2, 15);
loadi(3, 16);


// The eXpOS design stipulates that the scheduler is implemented as MODULE_5, and loaded in disk blocks 63 and 64 of the XFS disk. The boot module must load this module from disk to memory pages 50 and 51.
loadi(50,63);
loadi(51,64);

// breakpoint;

// Setting all other processes as terminated
alias iter R0;
iter = 0;
while(iter<16) do
    [PROCESS_TABLE +16*iter+ 4] = TERMINATED;
    iter=iter+1;
endwhile;


// You need two pages for storing the INIT program code (loaded from disk blocks 7 and 8) and one additional page for stack (why?). Hence, PTLR is set to value 3.
PTBR = PAGE_TABLE_BASE+20; //29696+20 = 29716


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";




// PROCESS 1

// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE + 16*1+ 1] = 1;
[PROCESS_TABLE +16*1+ 4] = CREATED; 
// Since the first available free page is 80, the User Area page is allocated at the physical page number 80. 
[PROCESS_TABLE + 16*1+ 11] = 80;
[PROCESS_TABLE +16*1+ 12] = 0; // KPTR
[PROCESS_TABLE +16*1+ 13] = 8*512; // UPTR
[PROCESS_TABLE +16*1+ 14] = PAGE_TABLE_BASE+20;//29716
[PROCESS_TABLE +16*1+ 15] = 10; // PTLR

// Setting top the the stack to the entry point of the code
[76*512] = [65*512+1];

// PROCESS 2 (EXEC)

// breakpoint;
// You need two pages for storing the INIT program code (loaded from disk blocks 7 and 8) and one additional page for stack (why?). Hence, PTLR is set to value 3.
PTBR = PAGE_TABLE_BASE+40; //29696+40 = 29736


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 87;
[PTBR+5] = "0110";
[PTBR+6] = 88;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 85;
[PTBR+9] = "0100";
[PTBR+10] = 86;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 89;
[PTBR+17] = "0110";
[PTBR+18] = 90;
[PTBR+19] = "0110";



// PROCESS 2
// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE + 16*2+ 1] = 2;
[PROCESS_TABLE +16*2+ 4] = CREATED; 
// Since the first available free page is 91, the User Area page is allocated at the physical page number 80. 
[PROCESS_TABLE + 16*2+ 11] = 91;
[PROCESS_TABLE +16*2+ 12] = 0; // KPTR
[PROCESS_TABLE +16*2+ 13] = 8*512; // UPTR
[PROCESS_TABLE +16*2+ 14] = PAGE_TABLE_BASE+40; 
[PROCESS_TABLE +16*2+ 15] = 10; // PTLR

// Setting top the the stack to the entry point of the code
[89*512] = [85*512+1];








// PROCESS 3 (EXEC)


// You need two pages for storing the INIT program code (loaded from disk blocks 7 and 8) and one additional page for stack (why?). Hence, PTLR is set to value 3.
PTBR = PAGE_TABLE_BASE+60; //29696+60 = 29756


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 92;
[PTBR+5] = "0110";
[PTBR+6] = 93;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 94;
[PTBR+9] = "0100";
[PTBR+10] = 95;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 96;
[PTBR+17] = "0110";
[PTBR+18] = 97;
[PTBR+19] = "0110";



// PROCESS 3
// we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
[PROCESS_TABLE + 16*3+ 1] = 3;
[PROCESS_TABLE +16*3+ 4] = CREATED; 
// Since the first available free page is 98, the User Area page is allocated at the physical page number 80. 
[PROCESS_TABLE + 16*3+ 11] = 98;
[PROCESS_TABLE +16*3+ 12] = 0; // KPTR
[PROCESS_TABLE +16*3+ 13] = 8*512; // UPTR
[PROCESS_TABLE +16*3+ 14] = PAGE_TABLE_BASE+60; 
[PROCESS_TABLE +16*3+ 15] = 10; // PTLR

// Setting top the the stack to the entry point of the code
[96*512] = [94*512+1];






return;